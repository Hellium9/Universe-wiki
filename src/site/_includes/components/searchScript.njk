<script src="https://cdn.jsdelivr.net/npm/flexsearch@0.7.21/dist/flexsearch.bundle.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', init, false);
    document.addEventListener('DOMContentLoaded', setCorrectShortcut, false);

    window.toggleSearch = function () {
        if (document.getElementById('globalsearch').classList.contains('active')) {
            document
                .getElementById('globalsearch')
                .classList
                .remove('active');
        } else {
            document
                .getElementById('globalsearch')
                .classList
                .add('active');
            document
                .getElementById('term')
                .focus();
        }
    }

    const loadingSvg = `
    <svg width="100" height="100" viewBox="0 0 45 45" xmlns="http://www.w3.org/2000/svg" stroke="#fff">
      <g fill="none" fill-rule="evenodd" transform="translate(1 1)" stroke-width="2">
          <circle cx="22" cy="22" r="6" stroke-opacity="0">
              <animate attributeName="r"
                   begin="1.5s" dur="3s"
                   values="6;22"
                   calcMode="linear"
                   repeatCount="indefinite" />
              <animate attributeName="stroke-opacity"
                   begin="1.5s" dur="3s"
                   values="1;0" calcMode="linear"
                   repeatCount="indefinite" />
              <animate attributeName="stroke-width"
                   begin="1.5s" dur="3s"
                   values="2;0" calcMode="linear"
                   repeatCount="indefinite" />
          </circle>
      </g>
    </svg>`;

    async function init() {
        const searchIndexDate = '{{meta.buildDate|isoDate}}';
        let shouldFetch = true;
        if (localStorage.getItem("searchIndex")) {
            let { date, docs } = JSON.parse(localStorage.getItem('searchIndex'));
            if (date === searchIndexDate) {
                shouldFetch = false;
                let index = createIndex(docs);
                window.docs = docs;
                window.index = index;
            }
        }
        if (shouldFetch) {
            let docs = await (await fetch('/searchIndex.json?v={{meta.buildDate|isoDate}}')).json();
            let index = createIndex(docs);
            localStorage.setItem("searchIndex", JSON.stringify({ date: '{{meta.buildDate|isoDate}}', docs }));
            window.docs = docs;
            window.index = index;
        }

        // DÃ©sactiver le zoom sur mobile
        document.querySelector('#term').setAttribute('style', 'font-size:16px;');

        const debouncedSearch = debounce(search, 200, false);
        field = document.querySelector('#term');
        field.addEventListener('keydown', (e) => {
            if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') {
                debouncedSearch();
            }
        });
        resultsDiv = document.querySelector('#search-results');
    }

    async function search() {
        let search = field.value.trim();
        if (!search) return;

        resultsDiv.innerHTML = loadingSvg;

        let results = offlineSearch(search);
        let resultsHTML = '';
        if (!results.length) {
            resultsDiv.innerHTML = `<p>No results for "${search}"</p>`;
            return;
        }
        resultsHTML += '<div style="max-width:100%;">';
        results.forEach(r => {
            const snippetStart = Math.max(0, r.content.toLowerCase().indexOf(search.toLowerCase()) - 30);
            const snippetEnd = Math.min(r.content.length, snippetStart + 60);
            const snippet = r.content.substring(snippetStart, snippetEnd);

            resultsHTML += `
                <div class="searchresult" onclick="window.location='${r.url}'" style="cursor: pointer;">
                    <a class="search-link" href="${r.url}" style="font-weight: bold; display: block;">${r.title}</a>
                    <p>...${snippet}...</p>
                </div>`;
        });
        resultsHTML += '</div>';
        resultsDiv.innerHTML = resultsHTML;
    }

    function offlineSearch(searchQuery) {
        let data = window.docs;

        let searchResults = index.search(searchQuery, [
            {
                field: "title",
                limit: 5
            }, {
                field: "content",
                weight: 10
            }
        ]);

        const dataIds = Array.from(new Set(searchResults.flatMap(result => result.result)));
        return dataIds.map((id) => {
            let result = data[id];
            result.content = truncate(result.content, 400);
            return result;
        });
    }

    function truncate(str, size) {
        str = str.replaceAll(/<[^>]*>/g, '');
        if (str.length < size) return str;
        return str.substring(0, size - 3) + '...';
    }

    function debounce(func, wait, immediate) {
        let timeout;
        return function () {
            const context = this, args = arguments;
            const later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            const callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    }
</script>