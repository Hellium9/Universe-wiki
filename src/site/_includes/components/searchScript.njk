<script src="https://cdn.jsdelivr.net/npm/flexsearch@0.7.21/dist/flexsearch.bundle.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', init, false);
    document.addEventListener('DOMContentLoaded', setCorrectShortcut, false);

    window.toggleSearch = function () {
        const globalSearch = document.getElementById('globalsearch');
        if (globalSearch.classList.contains('active')) {
            globalSearch.classList.remove('active');
        } else {
            globalSearch.classList.add('active');
            document.getElementById('term').focus();
        }
    }

    // Updated to exclude search field from closing
    document.addEventListener('click', (event) => {
        const globalSearch = document.getElementById('globalsearch');
        const isClickInsideSearchBox = globalSearch.contains(event.target);
        const isClickOnSearchField = event.target.id === 'term';

        if (!isClickInsideSearchBox || isClickOnSearchField) {
            return;
        }
        if (globalSearch.classList.contains('active')) {
            globalSearch.classList.remove('active');
        }
    });

    function createIndex(posts) {
        const encoder = (str) => str.toLowerCase().split(/([^a-z]|[^\x00-\x7F])/);
        const contentIndex = new FlexSearch.Document({
            cache: true,
            charset: "latin:extra",
            optimize: true,
            index: [
                { field: "content", tokenize: "reverse", encode: encoder },
                { field: "title", tokenize: "forward", encode: encoder },
                { field: "tags", tokenize: "forward", encode: encoder }
            ]
        });
        posts.forEach((p, idx) => {
            contentIndex.add({
                id: idx, title: p.title, content: p.content, tags: p.tags
            });
        });
        return contentIndex;
    }

    async function search() {
        let search = field.value.trim();
        if (!search) return;
        if (search == lastSearch) return;
        window.lastSearch = search;

        resultsDiv.innerHTML = loadingSvg;

        let results = offlineSearch(search);
        let resultsHTML = '';
        if (!results.length) {
            resultsDiv.innerHTML = `<p>No results for "${search}"</p>`;
            return;
        }
        resultsHTML += '<div style="max-width:100%;">';
        results.forEach(r => {
            const firstOccurrence = r.content.indexOf(search);
            const snippetStart = Math.max(0, firstOccurrence - 30);
            const snippetEnd = Math.min(r.content.length, snippetStart + 60);
            const snippet = r.content.substring(snippetStart, snippetEnd);

            resultsHTML += `
                <a href="${r.url}" class="searchresult" style="display:block; text-decoration:none;">
                    <div>
                        <span class="search-link">${r.title}</span>
                        <p>...${snippet}...</p>
                    </div>
                </a>`;
        });
        resultsHTML += '</div>';
        resultsDiv.innerHTML = resultsHTML;
    }

    function offlineSearch(searchQuery) {
        let data = window.docs;

        let searchResults = index.search(searchQuery, [
            { field: "title", limit: 5 },
            { field: "content", weight: 10 }
        ]);

        const dataIds = Array.from(new Set(searchResults.flatMap(result => result.result)));
        return dataIds.map((id) => {
            let result = data[id];
            result.content = truncate(result.content, 400);
            return result;
        });
    }
</script>