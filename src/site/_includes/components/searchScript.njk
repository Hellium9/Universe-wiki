<script src="https://cdn.jsdelivr.net/npm/flexsearch@0.7.21/dist/flexsearch.bundle.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', init, false);
    document.addEventListener('DOMContentLoaded', setCorrectShortcut, false);

    window.toggleSearch = function (e) {
        if (!e || e.target.id !== 'term') { // Exclure le champ de recherche
            const searchBox = document.getElementById('globalsearch');
            if (searchBox.classList.contains('active')) {
                searchBox.classList.remove('active');
            } else {
                searchBox.classList.add('active');
                document.getElementById('term').focus();
            }
        }
    };

    window.toggleTagSearch = function (evt) {
        const term = evt.textContent;
        if (term) {
            document.getElementById('term').value = term.trim();
            window.toggleSearch();
            window.search();
        }
    };

    const loadingSvg = `
    <svg width="100" height="100" viewBox="0 0 45 45" xmlns="http://www.w3.org/2000/svg" stroke="#fff">
      <g fill="none" fill-rule="evenodd" transform="translate(1 1)" stroke-width="2">
          <circle cx="22" cy="22" r="6" stroke-opacity="0">
              <animate attributeName="r" begin="1.5s" dur="3s" values="6;22" calcMode="linear" repeatCount="indefinite" />
              <animate attributeName="stroke-opacity" begin="1.5s" dur="3s" values="1;0" calcMode="linear" repeatCount="indefinite" />
              <animate attributeName="stroke-width" begin="1.5s" dur="3s" values="2;0" calcMode="linear" repeatCount="indefinite" />
          </circle>
      </g>
    </svg>`;

    function debounce(func, wait, immediate) {
        let timeout;
        return function () {
            const context = this, args = arguments;
            const later = function () {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            const callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    }

    function setCorrectShortcut() {
        if (navigator.platform.toUpperCase().indexOf('MAC') >= 0) {
            document.querySelectorAll(".search-keys").forEach(x => x.innerHTML = "âŒ˜ + K");
        }
    }

    function createIndex(posts) {
        const encoder = (str) => str.toLowerCase().split(/([^a-z]|[^\x00-\x7F])/);
        const contentIndex = new FlexSearch.Document({
            cache: true,
            charset: "latin:extra",
            optimize: true,
            index: [
                { field: "content", tokenize: "reverse", encode: encoder },
                { field: "title", tokenize: "forward", encode: encoder },
                { field: "tags", tokenize: "forward", encode: encoder }
            ]
        });
        posts.forEach((p, idx) => {
            contentIndex.add({ id: idx, title: p.title, content: p.content, tags: p.tags });
        });
        return contentIndex;
    }

    async function init() {
        const searchIndexDate = '{{meta.buildDate|isoDate}}';
        let shouldFetch = true;
        if (localStorage.getItem("searchIndex")) {
            const { date, docs } = JSON.parse(localStorage.getItem('searchIndex'));
            if (date === searchIndexDate) {
                shouldFetch = false;
                window.docs = docs;
                window.index = createIndex(docs);
            }
        }
        if (shouldFetch) {
            const docs = await (await fetch('/searchIndex.json?v={{meta.buildDate|isoDate}}')).json();
            window.docs = docs;
            window.index = createIndex(docs);
            localStorage.setItem("searchIndex", JSON.stringify({ date: '{{meta.buildDate|isoDate}}', docs }));
        }

        document.querySelector('#term').setAttribute('style', 'font-size:16px;');

        document.addEventListener('keydown', (e) => {
            if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
                e.preventDefault();
                toggleSearch();
            }
            if (e.key === 'Escape') {
                document.getElementById('globalsearch').classList.remove('active');
            }
        });

        const debouncedSearch = debounce(search, 200, false);
        const field = document.querySelector('#term');
        field.addEventListener('keydown', (e) => {
            if (e.key !== 'ArrowDown' && e.key !== 'ArrowUp') {
                debouncedSearch();
            }
        });
        resultsDiv = document.querySelector('#search-results');
        document.getElementById('globalsearch').addEventListener('click', toggleSearch);
    }

    window.lastSearch = '';
    async function search() {
        const search = field.value.trim();
        if (!search || search === window.lastSearch) return;
        window.lastSearch = search;

        resultsDiv.innerHTML = loadingSvg;
        const results = offlineSearch(search);
        if (!results.length) {
            resultsDiv.innerHTML = `<p>No results for "${search}"</p>`;
            return;
        }

        let resultsHTML = '<div style="max-width:100%;">';
        results.forEach(r => {
            const snippetStart = Math.max(0, r.content.indexOf(search) - 30);
            const snippetEnd = Math.min(r.content.length, snippetStart + 60);
            const snippet = r.content.substring(snippetStart, snippetEnd);

            resultsHTML += `
                <a href="${r.url}" class="searchresult" style="display:block; text-decoration:none;">
                    <div>
                        <span class="search-link">${r.title}</span>
                        <p>...${snippet}...</p>
                    </div>
                </a>`;
        });
        resultsHTML += '</div>';
        resultsDiv.innerHTML = resultsHTML;
    }

    function truncate(str, size) {
        str = str.replace(/<[^>]*>/g, '');
        return str.length < size ? str : str.substring(0, size - 3) + '...';
    }

    function offlineSearch(searchQuery) {
        const data = window.docs;
        const searchResults = index.search(searchQuery, [
            { field: "title", limit: 5 },
            { field: "content", weight: 10 }
        ]);

        const dataIds = Array.from(new Set(searchResults.flatMap(result => result.result)));
        return dataIds.map((id) => {
            const result = data[id];
            result.content = truncate(result.content, 400);
            return result;
        });
    }
</script>